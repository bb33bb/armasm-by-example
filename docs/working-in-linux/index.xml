<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ARM Assembly By Example</title><link>/docs/working-in-linux/</link><description>Recent content on ARM Assembly By Example</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="/docs/working-in-linux/index.xml" rel="self" type="application/rss+xml"/><item><title>Program 17: Add the Arguments</title><link>/docs/working-in-linux/add-the-arguments/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/working-in-linux/add-the-arguments/</guid><description>Reading program arguments # The first type of interaction you will learn about is how arguments are passed to a program from the Linux command line. To understand/visualize this, I HIGHLY recommend installing an extension such as GEF for the GNU debugger.
Take one of the programs you have created and start it in GDB. When you do this, set a break point at _start and run it using the command: r arg1 arg2 arg3.</description></item><item><title>Program 18: Add the Inputs</title><link>/docs/working-in-linux/add-the-inputs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/working-in-linux/add-the-inputs/</guid><description>Reading input and the docs # As you dig in deeper and deeper into your programming journey, it becomes more and more important to be able to read the docs. As boring and monotonous as that sounds, this is the best way to learn. Start by looking at the table of syscalls that you saw before. You can see that read is #3.
To learn more about the read operation, you can use the man pages by looking at the 2 (syscall) entry.</description></item><item><title>Program 19: Add the File</title><link>/docs/working-in-linux/add-the-file/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/working-in-linux/add-the-file/</guid><description>Reading more of the docs # For the next exercise, you will use the read call again, but on an actual file and not stdin. In the last example you knew the file descriptor was 0 for stdin. For this, you will need to first open the file in order to get the file descriptor.
When you look at the man page for open (man open 2) you will the following note:</description></item></channel></rss>