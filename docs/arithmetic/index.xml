<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ARM Assembly By Example</title><link>https://armasm.com/docs/arithmetic/</link><description>Recent content on ARM Assembly By Example</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://armasm.com/docs/arithmetic/index.xml" rel="self" type="application/rss+xml"/><item><title>Errors and Tests</title><link>https://armasm.com/docs/arithmetic/errors-and-tests/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/arithmetic/errors-and-tests/</guid><description>Errors and Tests # Both of these topics are important and not explicitly covered in this tutorial. However, the sooner you start thinking about them, the better off you will be when you need/want to include them in your program. They are not presented here to give answers, only to make sure you are considering them. Error handling # One of the two things that you miss in this series of exercises is error handling.</description></item><item><title>Datatypes</title><link>https://armasm.com/docs/arithmetic/datatypes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/arithmetic/datatypes/</guid><description>Datatypes # The string types # The first set of built in data types are the two that you have already learned: ascii and asciz. To review, both ascii and asciz encode ASCII characters to their integer equivalents. The asciz directive adds a null character to the end of the string.
The integer types # In the data section you can also specify integers that will be loaded with the program.</description></item><item><title>Multiplication</title><link>https://armasm.com/docs/arithmetic/multiplication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/arithmetic/multiplication/</guid><description>Multiplication # When a processor does multiplication, it doesn&amp;rsquo;t quite do multiplication in the way you can do it in your head. It uses a process you probably wouldn&amp;rsquo;t think about. In fact, with the ARM processors, every multiply operation takes at least ~4-6 cycles.
MUL operation # The MUL operation is the &amp;ldquo;basic&amp;rdquo; multiplication operation. It takes the format mul Rd, Rn, Rm where Rd is the destination and Rn and Rm are input registers.</description></item><item><title>Program 8: ITOA</title><link>https://armasm.com/docs/arithmetic/itoa/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/arithmetic/itoa/</guid><description>EQU directive # While you don&amp;rsquo;t have variables in the standard sense, there is one naming thing you can do. You can use the EQU directive to define a read only number.
.equ var1, 128 mov r0, #var1</description></item><item><title>The Stack</title><link>https://armasm.com/docs/arithmetic/the-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/arithmetic/the-stack/</guid><description>The Stack # We spoke before about the different places that data can live, now we will dive into how those places are used. Hard Drives/SSDs are use to store data &amp;ldquo;long term.&amp;rdquo; And by long term I mean generally longer than the invocation of a program. It&amp;rsquo;s also used for files that are exceptionally large.
Within the RAM, there are two primary areas: the stack and the heap. These concepts are constructs of the operating system.</description></item><item><title>Program 9: Factorials</title><link>https://armasm.com/docs/arithmetic/factorial/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/arithmetic/factorial/</guid><description>.stack-grid { display: grid; grid-template-columns: [fn] 1fr [frame] 1fr [label] 1fr [end]; border: 2px solid black; } .stack-fn { padding-left: 4px; grid-column: fn / frame; } .frame { grid-column: frame / label; height: 32px; border-width: 0px 2px 2px 2px; border-color: black; border-style: solid; padding-left: 4px; line-height: 32px; } .stack-label { grid-column: label / end; padding-lect: 4px; } .frame:last-of-type { border-bottom-width: 0px; } Including Other Files, Pt. 2 # In addition to using macros, we can use instructions in compile object files.</description></item><item><title>Program 10: Sum of Squares</title><link>https://armasm.com/docs/arithmetic/sum-of-squares/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/arithmetic/sum-of-squares/</guid><description/></item></channel></rss>