<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ARM Assembly By Example</title><link>https://armasm.com/docs/branches-and-conditionals/</link><description>Recent content on ARM Assembly By Example</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://armasm.com/docs/branches-and-conditionals/index.xml" rel="self" type="application/rss+xml"/><item><title>Conditionals</title><link>https://armasm.com/docs/branches-and-conditionals/conditionals/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/branches-and-conditionals/conditionals/</guid><description>Conditionals # There was a brief mention about the status codes stored in the CPSR. This is when you get to start using them. Because assembly doesn&amp;rsquo;t have the concept of data types, the processor needs to figure out another way to define conditions such as equal, not equal, greater than, less than or equal, etc. It does this by looking at the flags of the CPSR.
Comparison methods # The first thing you need to do is to tell the processor that you want it to update the CPSR.</description></item><item><title>Branches and Loops</title><link>https://armasm.com/docs/branches-and-conditionals/branches-and-loops/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/branches-and-conditionals/branches-and-loops/</guid><description>Branches and Loops # Now that you can write conditional code, you need to know how to move around the code in a non-linear manner. Assembly only has one such concept and that is branch. Branch is just like GOTO in languages that support it.
mov r0, #2 @ Move 2 into register 0 loop: add r0, #1 @ Add 1 to r0 b loop @ return to loop label As you can see above, when we branch we will branch to labels.</description></item><item><title>Program 5: Hello World Revisited</title><link>https://armasm.com/docs/branches-and-conditionals/hello-world-revisited/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/branches-and-conditionals/hello-world-revisited/</guid><description>Including Other Files, Pt. 1 # MACRO directive # Putting everything in one file is great keeping code together, but absolutely awful for more than trivial programs as the number of lines of code grows rapidly. There are two ways you can include code in from other files and this is the first way. Like a keyboard macro, the MACRO directive puts an exact copy of the code at the point of inclusion.</description></item><item><title>Program 6: Sticky Keyboard</title><link>https://armasm.com/docs/branches-and-conditionals/sticky-keyboard/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/branches-and-conditionals/sticky-keyboard/</guid><description>Are you tired of adding one all the time to increment memory addresses? What if I told you there was a better way? A way where you didn&amp;rsquo;t need the ADD opcode. A way that allows the processor to work in less cycles?!?!?!? Now for $19.95 I will show you the secret to be more efficient. Or you could just read below.
Incrementing LDR/STR instructions # Offset address # The first method is to alter the address before the LDR or STR operation happens.</description></item><item><title>Inspecting Our Program</title><link>https://armasm.com/docs/branches-and-conditionals/inspecting-our-program/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/branches-and-conditionals/inspecting-our-program/</guid><description>Inspecting Our Program # There are at least two programs you can use to look at programs and debug. First, compile the following program using the command as -g -o main.o main.s. What the -g flag will do is add debug symbols to the executable. The linker command will be the same as before. (ld -o main main.o)
.global_start _start: mov r4, #2 @ load 2 into r4 add r4, #6 @ add 6 to r4 Object dump # The first tool you can use is objdump.</description></item><item><title>Program 7: Cloning Myself</title><link>https://armasm.com/docs/branches-and-conditionals/cloning-myself/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://armasm.com/docs/branches-and-conditionals/cloning-myself/</guid><description>Make files # In the current day of project builders, scaffolding, runners, and so forth one may forget that there was a time, not so long ago, that you could just use a program installed on almost every *nix operating system. That program is make.
The syntax for a make file is very simple.
target: prerequisites &amp;lt;TAB&amp;gt;steps to build The first part is defining which files you need for the program.</description></item></channel></rss>